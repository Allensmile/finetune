import os
import random
import warnings
import logging
import itertools
import sys
import math
from abc import ABCMeta, abstractmethod
from collections import defaultdict
from copy import deepcopy

import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from finetune.download import download_data_if_required
from finetune.utils import interpolate_pos_embed, list_transpose
from finetune.encoding import TextEncoder, ArrayEncodedOutput, EncodedOutput
from finetune.config import PAD_TOKEN, get_default_config
from finetune.saver import Saver
from finetune.imbalance import compute_class_weights
from finetune.errors import FinetuneError
from finetune.model import get_model_fn
from finetune.model import PredictMode

from tensorflow.data import Dataset

JL_BASE = os.path.join(os.path.dirname(__file__), "model", "Base_model.jl")
_LOGGER = logging.getLogger(__name__)


SAVE_PREFIX = 'model'
MIN_UPDATES = 15

class BaseModel(object, metaclass=ABCMeta):
    """
    A sklearn-style class for finetuning a Transformer language model on a classification task.
    """

    def __init__(self, config=None, **kwargs):
        """ 
        For a full list of configuration options, see `finetune.config`.
        
        :param config: A config object generated by `finetune.config.get_config` or None (for default config).
        :param **kwargs: key-value pairs of config items to override.
        """
        tf.reset_default_graph()

        self.config = config or get_default_config()
        self.config.update(kwargs)

        if self.config.num_layers_trained != self.config.n_layer and self.config.train_embeddings:
            raise ValueError("If you are only finetuning a subset of the layers, you cannot finetune embeddings.")

        self.label_encoder = None
        self._initialize()
        self.target_dim = None
        self.pad_idx_ = None

    def _initialize(self):
        # Initializes the non-serialized bits of the class.
        self._set_random_seed(self.config.seed)

        download_data_if_required()
        self.encoder = TextEncoder()

        def process_embeddings(name, value):
            if "/we:0" not in name:
                return value

            vocab_size = self.encoder.vocab_size
            word_embeddings = value[:vocab_size - len(self.encoder.special_tokens)]
            special_embed = value[len(word_embeddings): vocab_size]
            positional_embed = value[vocab_size:]
            if self.config.interpolate_pos_embed and self.config.max_length != len(positional_embed):
                positional_embed = interpolate_pos_embed(positional_embed, self.config.max_length)
            elif self.config.max_length > len(positional_embed):
                raise ValueError("Max Length cannot be greater than {} if interploate_pos_embed is turned off".format(len(positional_embed)))
            else:
                positional_embed = positional_embed[:self.config.max_length]

            embeddings = np.concatenate((word_embeddings, special_embed, positional_embed), axis=0)
            return embeddings

        self.saver = Saver(
            fallback_filename=self.config.base_model_path,
            exclude_matches=None if self.config.save_adam_vars else "adam",
            variable_transforms=[process_embeddings]
        )

    def _format_for_encoding(self, X):
        """
        Most subclasses take in inputs as:
            List (batch) of list (docs)
        
        Encode_multi_input expect the following format:
            List (batch) of list (docs) of list (subseqs) of text
        
        This method is responsible for standardizing inputs to the above format
        """
        return [[X]]

    def _text_to_ids(self, Xs, Y=None, pad_token=PAD_TOKEN):

        Xs = self._format_for_encoding(Xs)
        if self.config.chunk_long_sequences and len(Xs[0]) == 1:
            # can only chunk single sequence inputs
            chunk_size = self.config.max_length - 2 
            step_size = chunk_size // 3
            encoded = self.encoder.encode_multi_input(
                Xs,
                Y=Y,
                max_length=sys.maxsize,
                pad_token=pad_token
            )
            d = defaultdict(list)
            for idx in range(len(encoded.token_ids)):
                length = len(encoded.token_ids[idx])
                starts = list(range(0, length, step_size))
                for start in starts:
                    end = start + chunk_size
                    for field in EncodedOutput._fields:
                        field_value = getattr(encoded, field)
                        if field_value is not None:
                            d[field].append(field_value[idx][start:end])
                    if end >= length:
                        break
            encoder_out = EncodedOutput(**d)
            return self._array_format(encoder_out, pad_token=pad_token)
        else:
            encoder_out = self.encoder.encode_multi_input(
                Xs,
                Y=Y, 
                max_length=self.config.max_length,
                pad_token=pad_token
            )
            return self._array_format(encoder_out, pad_token=pad_token)
        
    @abstractmethod
    def _predict_op(self, logits, **kwargs):
        raise NotImplementedError

    @abstractmethod
    def _predict_proba_op(self, logits, **kwargs):
        raise NotImplementedError

    @abstractmethod
    def _target_model(self, *, featurizer_state, targets, n_outputs, train=False, reuse=None, **kwargs):
        # Overridden by subclass to attach a target model onto the shared base featurizer.
        raise NotImplementedError

    @abstractmethod
    def _target_encoder(self):
        # Overridden by subclass to produce the right target encoding for a given target model.
        raise NotImplementedError

    def _eval(self, *tensors, feed_dict):
        """
        Evaluate the value of each of the provided tensors.
        Returns a `dict` that maps from tensor to result value.
        If any result value is None, that result is excluded from the results `dict`.
        """
        tensors = [
            tensor if tensor is not None else self.noop
            for tensor in tensors
        ]
        values = self.sess.run(tensors, feed_dict=feed_dict)
        return {
            tensor: value
            for tensor, value in zip(tensors, values)
            if value is not None
        }


    def finetune(self, Xs, Y=None, batch_size=None):
        if not callable(Xs) and Y is not None and len(Xs) != len(Y):
            raise FinetuneError(
                "Mismatch between number of examples ({}) and number of targets ({}) provided.".format(
                    len(Xs),
                    len(Y)
                )
            )
        val_size, val_interval = self.validation_settings(n_examples=len(Xs) if not callable(Y) else self.config.n_examples, batch_size=batch_size or self.config.batch_size)
        val_input_fn, train_input_fn = self._get_train_input_fns(Xs, Y, batch_size=batch_size, val_size=val_size)
        sess = tf.Session()
        itt = train_input_fn()
        train_spec = tf.estimator.TrainSpec(input_fn=train_input_fn, max_steps=val_interval)
        eval_spec = tf.estimator.EvalSpec(input_fn=val_input_fn)
        tf.estimator.train_and_evaluate(self.get_estimator(val_interval=val_interval), train_spec=train_spec, eval_spec=eval_spec)


    def get_estimator(self, val_interval=None):
        conf = tf.ConfigProto(
            allow_soft_placement=self.config.soft_device_placement,
            log_device_placement=self.config.log_device_placement,
        )
        config = tf.estimator.RunConfig(
            tf_random_seed=None,
            save_summary_steps=val_interval,
            save_checkpoints_steps=val_interval,
            save_checkpoints_secs=None,
            session_config=conf,
            keep_checkpoint_max=1,
            keep_checkpoint_every_n_hours=10000,
            log_step_count_steps=100,
            #     train_distribute=None,
            #    device_fn=None
        )

        model_fn = get_model_fn(
            target_model_fn=self._target_model,
            predict_op=self._predict_op,
            predict_proba_op=self._predict_proba_op,
            build_target_model=self.target_dim is not None,
            build_lm=self.config.lm_loss_coef > 0.0 or self.target_dim is None,
            encoder=self.encoder,
            target_dim=self.target_dim,
            label_encoder=self.label_encoder,
            saver=self.saver
        )
        return tf.estimator.Estimator(model_fn=model_fn, config=config, params=self.config)

    @property
    def pad_idx(self):
        if self.pad_idx_ is None:
            self.pad_idx_ = list(self.label_encoder.classes_).index(self.config.pad_token)
        return self.pad_idx_

    def validation_settings(self, n_examples, batch_size):
        """
        Auto-select reasonable validation settings
        """
        if self.config.val_size != None and self.config.val_interval != None:
            return self.config.val_size, self.config.val_interval

        # Auto-select reasonable validation size
        if self.config.val_size is None:
            if n_examples < 50:
                val_size = 0
            else:
                val_size = max(5, int(0.05 * n_examples))
                val_size = min(100, val_size)
        else:
            val_size = self.config.val_size

        # Auto-select reasonable validation interval
        if self.config.val_interval is None:
            # sys.maxsize corresponds to never running validation
            # and is used when val_size is set to 0
            val_interval = 4 * int(math.ceil(val_size / batch_size)) or sys.maxsize
        else:
            val_interval = self.config.val_interval

        return val_size, val_interval

    def _define_placeholders(self, target_dim=None):
        # tf placeholders
        self.X = tf.placeholder(tf.int32, [None, self.config.max_length, 2])  # token idxs (BPE embedding + positional)
        self.M = tf.placeholder(tf.float32, [None, self.config.max_length])  # sequence mask
        # when target dim is not set, an array of [None] targets is passed as a placeholder
        self.do_dropout = tf.placeholder(tf.float32)  # 1 for do dropout and 0 to not do dropout
        self.Y = self._target_placeholder(target_dim=target_dim)

    def _get_train_input_fns(self, Xs, Y=None, batch_size=None, val_size=None):
        batch_size = batch_size or self.config.batch_size

        shuffle_buffer_size = 100
        val_size = val_size or 0
        prefetch_buffer = 2  # breaks the pipeline to allow concurrency

        self.label_encoder = self._target_encoder()

        # Create restartable generators
        Y_t = None
        target_dim = -1
        if not callable(Xs):
            if Y is None:
                Y = np.asarray([[]] * len(Xs))
                target_dim = None
            else:
                Y_t = self.label_encoder.fit_transform(Y)
            dataset = lambda: zip(Xs, Y_t)

        else:
            if Y is None:
                target_dim = None

                def Y():
                    while True:
                        yield []
            else:
                Y_fit = [itertools.islice(Y(), 100)]  # TODO find a more principled way to do this?
                Y_t = self.label_encoder.fit_transform(Y_fit)

            dataset = lambda: zip(Xs(), map(lambda y: self.label_encoder.transform([y])[0],
                                            Y()))  # encode one sample at a time.
        if target_dim == -1:
            target_dim = self.label_encoder.target_dim
        self.lm_loss_coef = self.config.lm_loss_coef if target_dim is not None else 1.0
        self.target_dim = target_dim

        self._define_placeholders(target_dim=target_dim)  # TODO  This needs to go.
        if Y_t is not None:
            self.config.class_weights = compute_class_weights(class_weights=self.config.class_weights,
                                                              Y=Y_t)  # TODO is this okay, just taken from a small sample of the dataset?

        def text_to_tokens_mask(X):
            out = self._text_to_ids(X)
            return {
                "tokens": out.token_ids,
                "mask": out.mask
            }

        dataset_encoded = lambda: map(lambda xy: (text_to_tokens_mask(xy[0]), xy[1]), dataset())
        tf_dataset = Dataset.from_generator(
            dataset_encoded,
            ({"tokens": self.X.dtype, "mask": self.M.dtype}, self.Y.dtype),
            # tokens, mask # TODO, update the API so this isnt pulled from placeholders...lol
            ({"tokens": self.X.shape[1:], "mask": self.M.shape[1:]}, self.Y.shape[1:])
        ).shuffle(shuffle_buffer_size, seed=self.config.seed)

        val_dataset = tf_dataset.take(val_size).batch(batch_size).prefetch(prefetch_buffer)
        train_dataset = tf_dataset.skip(val_size).batch(batch_size).repeat(self.config.n_epochs).prefetch(prefetch_buffer)

        return (lambda : val_dataset.make_one_shot_iterator().get_next("Val_dataset"),
        lambda: train_dataset.make_one_shot_iterator().get_next("Train_dataset"))

    def _get_predict_input_fn(self, Xs, batch_size=None):
        batch_size = batch_size or self.config.batch_size
        prefetch_buffer = 2  # breaks the pipeline to allow concurrency

        if not callable(Xs):
            Xs_fn = lambda: Xs
        else:
            Xs_fn = Xs

        self._define_placeholders(target_dim=self.target_dim)  # TODO  This needs to go.

        def text_to_tokens_mask(X):
            out = self._text_to_ids(X)
            return {
                "tokens": out.token_ids,
                "mask": out.mask
            }

        dataset_encoded = lambda: map(text_to_tokens_mask, Xs_fn())
        tf_dataset = Dataset.from_generator(
            dataset_encoded,
            {"tokens": self.X.dtype, "mask": self.M.dtype},
            # tokens, mask # TODO, update the API so this isnt pulled from placeholders...lol
            {"tokens": self.X.shape[1:], "mask": self.M.shape[1:]}
        )
        dataset = tf_dataset.batch(batch_size).prefetch(prefetch_buffer)

        return lambda : dataset.make_one_shot_iterator().get_next("Pred_dataset")

    def _inferrence(self, Xs, mode):
        estimator = self.get_estimator()
        input_func = self._get_predict_input_fn(Xs)
        pred_gen = list(map(lambda y: y[mode], estimator.predict(input_fn=input_func, predict_keys=mode)))
        return pred_gen


    def fit(self, *args, **kwargs):
        """ An alias for finetune. """
        return self.finetune(*args, **kwargs)

    def _predict(self, Xs):
        raw_preds = self._inferrence(Xs, PredictMode.NORMAL)
        return self.label_encoder.inverse_transform(raw_preds)

    def predict(self, Xs):
        return self._predict(Xs)

    def _predict_proba(self, Xs):
        """
        Produce raw numeric outputs for proba predictions
        """
        raw_preds = self._inferrence(Xs, PredictMode.PROBAS)
        return raw_preds

    def predict_proba(self, *args, **kwargs):
        """
        The base method for predicting from the model.
        """
        raw_probas = self._predict_proba(*args, **kwargs)
        classes = self.label_encoder.classes_

        formatted_predictions = []
        for probas in raw_probas:
            formatted_predictions.append(
                dict(zip(classes, probas))
            )
        return formatted_predictions

    def _featurize(self, Xs):
        self.mode = PredictMode.PROBAS
        estimator = self.get_estimator()
        input_func = self._get_predict_input_fn(Xs)
        pred_gen = estimator.predict(input_fn=input_func, predict_keys=self.mode)
        return list(pred_gen)

    @abstractmethod
    def featurize(self, *args, **kwargs):
        """
        Base method to get raw features out of the model.
        These features are the same that are fed into the target_model.
        """
        return self._featurize(*args, **kwargs)

    @classmethod
    def get_eval_fn(cls):
        raise NotImplementedError("No default eval function is given, please pass an explicit eval fn to grid_search")

    def transform(self, *args, **kwargs):
        """
        An alias for `featurize`.
        """
        return self.featurize(*args, **kwargs)

    def _array_format(self, encoded_output, pad_token=PAD_TOKEN):
        """
        Returns numpy array of token idxs and corresponding mask
        Returned `x` array contains two channels:
            0: byte-pair encoding embedding
            1: positional embedding
        """
        seq_length = len(encoded_output.token_ids)
        x = np.zeros((self.config.max_length, 2), dtype=np.int32)
        mask = np.zeros((self.config.max_length), dtype=np.float32)

        if encoded_output.labels is not None:
            labels_arr = np.empty((self.config.max_length), dtype='object')
            labels_arr.fill(pad_token)
        else:
            labels_arr = None

        # BPE embedding
        x[:seq_length, 0] = encoded_output.token_ids
        # masking: value of 1 means "consider this in cross-entropy LM loss"
        mask[1:seq_length] = 1
        if encoded_output.labels:
            labels_arr[:seq_length] = encoded_output.labels
        # positional_embeddings
        x[:, 1] = np.arange(self.encoder.vocab_size, self.encoder.vocab_size + self.config.max_length)

        return ArrayEncodedOutput(
            token_ids=x,
            tokens=encoded_output.tokens,
            labels=labels_arr,
            char_locs=encoded_output.char_locs,
            mask=mask,
        )

    def _set_random_seed(self, seed=None):
        seed = seed or self.config.seed
        random.seed(seed)
        np.random.seed(seed)
        tf.set_random_seed(seed)

    def _target_placeholder(self, target_dim=None):
        return tf.placeholder(tf.float32, [None, target_dim or 1])  # classification targets

    def generate_text(self, seed_text='', max_length=None, use_extra_toks=True): # TODO
        """
        Performs a prediction on the Language modeling objective given some seed text. It uses a noisy greedy decoding.
        Temperature parameter for decoding is set in the config.

        :param max_length: The maximum length to decode to.
        :param seed_text: Defaults to the empty string. This will form the starting point to begin modelling
        :return: A string containing the generated text.
        """
        self.require_lm = True
        self.config.use_extra_toks = use_extra_toks
        encoded = self.encoder._encode([seed_text])
        if encoded == [] and not use_extra_toks:
            raise ValueError("If you are not using the extra tokens, you must provide some non-empty seed text")
        start = [self.encoder.start] if use_extra_toks else []
        encoded = EncodedOutput(token_ids=[start + encoded.token_ids[0]])
        self._build_model(n_updates_total=0, target_dim=self.target_dim, train=False)
        EOS = self.encoder.clf_token
        with warnings.catch_warnings():
            warnings.filterwarnings("ignore")
            for i in range(len(encoded.token_ids), (max_length or self.config.max_length) - 2):
                arr_encoded = self._array_format(encoded)
                class_idx = self.sess.run(self.lm_predict_op, {self.X: arr_encoded.token_ids, self.M: arr_encoded.mask})
                encoded.token_ids[0].append(class_idx[i])
                if encoded.token_ids[0][-1] == EOS:
                    break

        del self.config["use_extra_toks"]
        return self.encoder.decode(encoded.token_ids[0])

    def __getstate__(self):
        """
        Leave serialization of all tf objects to tf
        """
        required_fields = [
            'label_encoder', 'target_dim', '_load_from_file', 'config', 'target_type', "pad_idx_"
        ]
        serialized_state = {
            k: v for k, v in self.__dict__.items()
            if k in required_fields
        }
        return serialized_state

    def save(self, path):
        """
        Saves the state of the model to disk to the folder specific by `path`.  If `path` does not exist, it will be auto-created.

        Save is performed in two steps:
            - Serialize tf graph to disk using tf.Saver
            - Serialize python model using pickle

        Note:
            Does not serialize state of Adam optimizer.
            Should not be used to save / restore a training model.
        """
        if path is None:
            return

        path = os.path.abspath(path)
        self.saver.save(self, path)
        self._load_from_file = False

    @classmethod
    def load(cls, path):
        """
        Load a saved fine-tuned model from disk.  Path provided should be a folder which contains .pkl and tf.Saver() files

        :param path: string path name to load model from.  Same value as previously provided to :meth:`save`. Must be a folder.
        """
        saver = Saver(JL_BASE)
        model = saver.load(path)
        model._initialize()
        model.saver.variables = saver.variables
        tf.reset_default_graph()
        return model
   
    @classmethod
    def finetune_grid_search(cls, Xs, Y, *, test_size, config=None, eval_fn=None, probs=False, return_all=False):
        """
        Performs grid search over config items defined using "GridSearchable" objects and returns either full results or
        the config object that relates to the best results. The default config contains grid searchable objects for the
        most important parameters to search over.

        :param Xs: Input text. Either [num_samples] or [sequence, num_samples] for single or multi input models respectively.
        :param Y: Targets, A list of targets, [num_samples] that correspond to each sample in Xs.
        :param test_size: Int or float. If an int is given this number of samples is used to validate, if a float is
         given then that fraction of samples is used.
        :param config: A config object, or None to use the default config.
        :param eval_fn: An eval function that takes 2 inputs (prediction, truth) and returns a float, with a max value being desired.
        :param probs: If true, eval_fn is passed probability outputs from predict_proba, otherwise the output of predict is used.
        :param return_all: If True, all results are returned, if False, only the best config is returned.
        :return: default is to return the best config object. If return_all is true, it returns a list of tuples of the
            form [(config, eval_fn output), ... ]
        """
        if isinstance(Xs[0], str):
            Xs = [Xs]
        config = config or get_default_config()
        config.val_size = 0.0
        eval_fn = eval_fn or cls.get_eval_fn()

        trainXs, testXs, trainY, testY = train_test_split(list_transpose(Xs), Y, test_size=test_size, shuffle=True)
        trainXs = list_transpose(trainXs)
        testXs = list_transpose(testXs)
        gs = config.get_grid_searchable()
        ranged_keys = gs.keys()
        ranged_iterators = gs.values()
        grid_gen = itertools.product(*ranged_iterators)
        results = []
        for grid_item in grid_gen:
            config_ = deepcopy(config)
            config_.update(dict(zip(ranged_keys, grid_item)))
            instance = cls(config=config_)
            instance.finetune(*trainXs, Y=trainY)
            if probs:
                res = instance.predict_proba(*testXs)
            else:
                res = instance.predict(*testXs)
            results.append((config_, eval_fn(res, testY)))
            del instance

        if return_all:
            return results
        return max(results, key=lambda x: x[1])[0]


    @classmethod
    def finetune_grid_search_cv(cls, Xs, Y, *, n_splits, test_size, config=None, eval_fn=None, probs=False, return_all=False):
        """
        Performs cross validated grid search over config items defined using "GridSearchable" objects and returns either full results or
        the config object that relates to the best results. The default config contains grid searchable objects for the
        most important parameters to search over.

        It should be noted that the cv splits are not guaranteed unique, but each split is given to each set of hparams.

        :param Xs: Input text. Either [num_samples] or [sequence, num_samples] for single or multi input models respectively.
        :param Y: Targets, A list of targets, [num_samples] that correspond to each sample in Xs.
        :param n_splits: Number of CV splits to do.
        :param test_size: Int or float. If an int is given this number of samples is used to validate, if a float is
            given then that fraction of samples is used.
        :param config: A config object, or None to use the default config.
        :param eval_fn: An eval function that takes 2 batches of outputs and returns a float, with a max value being
            desired. An arithmetic mean must make sense for this metric.
        :param probs: If true, eval_fn is passed probability outputs from predict_proba, otherwise the output of predict is used.
        :param return_all: If True, all results are returned, if False, only the best config is returned.
        :return: default is to return the best config object. If return_all is true, it returns a list of tuples of the
            form [(config, eval_fn output), ... ]
        """
        results = []
        for _ in range(n_splits):
            res = cls.finetune_grid_search(Xs, Y, test_size=test_size, probs=probs, eval_fn=eval_fn, config=config,
                                           return_all=True)
            results.append(res)
        results = list(zip(*results))
        aggregated_results = []
        for configuration in results:
            config_common = None
            sum_res = 0
            n_res = 0
            for config, result in configuration:
                config_common = config_common or config
                assert config == config_common
                n_res += 1
                sum_res += result
            aggregated_results.append((config_common, sum_res/n_res))

        if return_all:
            return aggregated_results

        return max(aggregated_results, key=lambda x: x[1])[0]

    def __del__(self):
        try:
            if self.sess is not None:
                self.sess.close()
        except AttributeError:
            pass
